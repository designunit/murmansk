import { Project } from '@/components/Project'
import { Layout } from '@/components/Layout'
import { IMeta, Meta } from '@/components/Meta'
import { Section } from '@/components/Section'
import { NextPage, GetStaticProps } from 'next'
import Head from 'next/head'
import React, { forwardRef, ReactElement, useCallback, useState } from 'react'
import { useMobile } from '@/hooks/useMobile'
import ReactCompareImage from 'react-compare-image'
import { useForm } from 'react-hook-form'
import { Button } from '@/components/Button'
import { Emoji } from '@/components/Emoji'
import Image from 'next/image'

interface ILandingProps {
    meta: IMeta
}

type InputProps = React.InputHTMLAttributes<HTMLInputElement>
const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => (
    <input
        {...props}
        ref={ref}
        style={{
            padding: '8px 16px',
            height: '2rem',
            width: ' 100%',

            fontFamily: ' var(--font-family)',
            fontWeight: 500,
            fontSize: 16,
            lineHeight: 26,

            borderRadius: 'var(--border-radius)',
            border: '2px solid #091133',
        }}
    />
))
interface QuestionProps { head: ReactElement | string, required?: boolean, caption?: string }
const Question: React.FC<QuestionProps> = ({ head, children, required = true, caption }) => (
    <div style={{
        marginBottom: '.5rem',
        display: 'flex',
        justifyContent: 'center',
        flexFlow: 'column',
        // maxWidth: '30rem',
        width: '100%',
    }}>
        <div style={{
            fontSize: 22,
            marginBottom: '.5rem',
        }}>
            {head}
        </div>
        {caption && (
            // className={s.questionCaption}
            <p>
                {caption}
            </p>
        )}
        {children}
    </div >
)

const AbramMys: NextPage<ILandingProps> = ({ meta }) => {
    const isMobile = useMobile()

    const { handleSubmit, register } = useForm({
        defaultValues: {
            one: '',
            two: '',
            thee: '',
        },
        shouldFocusError: false,
    })

    const [formState, setFormState] = useState<'start' | 'ok' | 'error' | 'fetch'>('start')

    const onSubmit = useCallback(async value => {
        setFormState('fetch')
        const data = {
            id: 'abram-mys',
            ...value
        }
        await fetch('/api', { method: 'POST', body: JSON.stringify(data) })
            .then((res) => {
                if (res.status !== 200) {
                    console.log(res)
                }
                return res.json()
            })
            .then(res => {
                res.result === 'error' && console.log(res)
                setFormState(res.result === 'success' ? 'ok' : 'error')
            })
    }, [])

    const Skeleton = props => (
        <img
            src={props.src}
            style={{
                objectFit: 'cover',
                width: '100%',
                filter: ' blur(5px)',
            }}
        />
    )

    return (
        <>
            <Head>
                <title>–ú–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ</title>
                <Meta meta={meta} />
            </Head>
            <Layout>
                <Section style={{
                    paddingTop: 0,
                    paddingBottom: 0,
                    ...{
                        padding: isMobile && 0,
                    }
                }}>
                    <Project
                        title='–ê–±—Ä–∞–º –º—ã—Å'
                    >
                        <Section
                            style={{
                                padding: '1rem 0',
                                position: 'relative',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/abram-mys/1.jpg'}
                                rightImage={'/static/projects/abram-mys/2.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/abram-mys/1.jpg'}
                                    />
                                )}
                            />
                        </Section>
                        <p>
                            –û–±–∑–æ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–∞ –ê–±—Ä–∞–º –º—ã—Å–µ —Å—Ç–∞–Ω–µ–º –º–æ—â–Ω—ã–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞—Ç—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º. –¢–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–∏—Ç–æ–∫—É —Ç—É—Ä–∏—Å—Ç–æ–≤ –≤ —ç—Ç–æ—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –æ–±–æ—Å–æ–±–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞. –ü–ª–æ—â–∞–¥–∫–∞ —Å–æ–∑–¥–∞—Å—Ç —Å–∏–ª—å–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –æ–±—Ä–∞–∑, –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∑–Ω–∞—á–∏–º—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ —Å–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö –∏ —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ.
                        </p>
                        <Section
                            style={{
                                padding: '1rem 0',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/abram-mys/3.jpg'}
                                rightImage={'/static/projects/abram-mys/4.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/abram-mys/3.jpg'}
                                    />
                                )}
                            />
                        </Section>
                        <p>
                            –ü–ª–æ—â–∞–¥–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∏–¥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ª–µ—Å—Ç–Ω–∏—Ü–µ–π. –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äì –æ–±–∑–æ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ ‚Äì –∫–æ–Ω—Å–æ–ª—å, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –≥–æ—Ä–æ–¥–∞, –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ª–∏–≤—É –ø—Ä–æ–º–µ–Ω–∞–¥.
                        </p>
                        <Section
                            style={{
                                padding: '1rem 0',
                                position: 'relative'
                            }}
                        >
                            <Image
                                src={'/static/projects/abram-mys/5.jpg'}
                                width={3733}
                                height={2732}
                                objectFit='cover'
                            />
                            <p>
                                –í–∞–∂–Ω–æ, —á—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–æ—Ä—Ç–µ–Ω–æ–≤–∞—è —Å—Ç–∞–ª—å, –º–µ—Ç–∞–ª–ª), —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç. –ö—Ä–æ–º–µ —Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–º–µ–Ω–Ω—ã–µ –≤—ã—Å—Ç—É–ø—ã, –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏—Ä–æ–¥–Ω—É—é —ç–∫–æ-—Å–∏—Å—Ç–µ–º—É. –ü–ª–æ—â–∞–¥–∫–∞ —Å—Ç–∞–Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —ç–∫–æ-–º–∞—Ä—à—Ä—É—Ç–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –∏ –≥–æ—Å—Ç–µ–π –≥–æ—Ä–æ–¥–∞, –ø–æ–∑–≤–æ–ª—è—è —É–≤–∏–¥–µ—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –ø–∞–Ω–æ—Ä–∞–º—É —Å –Ω–æ–≤–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.
                            </p>
                        </Section>
                        <Section
                            style={{
                                padding: '1rem 0',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/abram-mys/6.jpg'}
                                rightImage={'/static/projects/abram-mys/7.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/abram-mys/6.jpg'}
                                    />
                                )}
                            />
                            <form
                                onSubmit={handleSubmit(onSubmit)}
                            >
                                <Section style={{
                                    padding: '2rem 0 1rem 0',
                                    display: 'flex',
                                    flexFlow: 'column',
                                    alignItems: 'center',
                                }}>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ? –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ? '}
                                                <Emoji name='ü•∞' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='one'
                                            ref={register}
                                        />
                                    </Question>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ? –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? '}
                                                <Emoji name='ü•µ' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='two'
                                            ref={register}
                                        />
                                    </Question>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? –í–∞—à–∏ –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è '}
                                                <Emoji name='ü§î' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='three'
                                            ref={register}
                                        />
                                    </Question>
                                    <Question
                                        head={(
                                            <>
                                                {'–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞/—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏/–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã) –µ—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '}
                                                <Emoji name='ü§ì' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='four'
                                            ref={register}
                                        />
                                    </Question>
                                    {(formState === 'start' || formState === 'error') && (
                                        <Button
                                            theme='default'
                                            size={'big'}
                                            type={'submit'}
                                            style={{
                                                alignSelf: 'center',
                                                margin: '2rem 0',
                                            }}
                                        >
                                            {formState === 'error' ? '–ß—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å. –ï—â–µ —Ä–∞–∑?' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                                        </Button>
                                    )}
                                    {(formState === 'fetch' || formState === 'ok') && (
                                        <span
                                            style={{
                                                margin: '2rem 0',
                                            }}
                                        >
                                            {formState === 'fetch' ? (
                                                <>
                                                    {'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º '}
                                                    <Emoji name='üì°' />
                                                </>
                                            ) : (
                                                <>
                                                    <Emoji name='ü§©' />
                                                    {' –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω '}
                                                    <Emoji name='ü•≥' />
                                                </>
                                            )}
                                        </span>
                                    )}
                                </Section>
                            </form>

                            <Section style={{
                                padding: '1rem 0',
                                display: 'flex',
                                flexFlow: 'column',
                                alignItems: 'center',
                            }}>
                                <h3
                                    style={{
                                        fontSize: 33,
                                        padding: '3rem 0',
                                        margin: 0,
                                        textTransform: 'uppercase',
                                    }}
                                >
                                    –í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
                                </h3>
                                <iframe
                                    style={{
                                        width: ' 100%',
                                        height: isMobile ? '300px' : 753,
                                        maxWidth: 922,
                                        maxHeight: 753,
                                    }}
                                    src="https://www.youtube.com/embed/eBGIQ7ZuuiU" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" />
                            </Section>
                        </Section>
                    </Project>
                </Section>
            </Layout>
        </>
    )
}

export const getStaticProps: GetStaticProps = async (context) => {
    const meta: IMeta = {
        title: '–ú–û–ô–ó–ê–õ–ò–í.–†–§',
        description: '–î–æ—Ä–æ–≥–∏–µ –ú—É—Ä–º–∞–Ω—á–∞–Ω–µ, –¥–∞–≤–∞–π—Ç–µ —á–∞—â–µ –ª—é–±–æ–≤–∞—Ç—å—Å—è –≤–∏–¥–∞–º–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!',
        image: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ/static/meta.jpg',
        imageWidth: 911,
        imageHeight: 1023,

        url: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ/',
        siteName: '–î–æ—Ä–æ–≥–∏–µ –ú—É—Ä–º–∞–Ω—á–∞–Ω–µ, –¥–∞–≤–∞–π—Ç–µ —á–∞—â–µ –ª—é–±–æ–≤–∞—Ç—å—Å—è –≤–∏–¥–∞–º–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!',
        locale: 'ru_RU',
        type: 'website',
        domain: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ',

        twitterCard: 'summary_large_image',
        twitterSite: '@',
        twitterCreator: '@tmshv',
    }

    return {
        props: {
            meta,
        }
    }
}

export default AbramMys