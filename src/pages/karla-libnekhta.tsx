import { Project } from '@/components/Project'
import { Layout } from '@/components/Layout'
import { IMeta, Meta } from '@/components/Meta'
import { Section } from '@/components/Section'
import { NextPage, GetStaticProps } from 'next'
import Head from 'next/head'
import React, { forwardRef, ReactElement, useCallback, useState } from 'react'
import { useMobile } from '@/hooks/useMobile'
import ReactCompareImage from 'react-compare-image'
import { useForm } from 'react-hook-form'
import { Button } from '@/components/Button'
import { Emoji } from '@/components/Emoji'
import Image from 'next/image'

interface ILandingProps {
    meta: IMeta
}

type InputProps = React.InputHTMLAttributes<HTMLInputElement>
const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => (
    <input
        {...props}
        ref={ref}
        style={{
            padding: '8px 16px',
            height: '2rem',
            width: ' 100%',

            fontFamily: ' var(--font-family)',
            fontWeight: 500,
            fontSize: 16,
            lineHeight: 26,

            borderRadius: 'var(--border-radius)',
            border: '2px solid #091133',
        }}
    />
))
interface QuestionProps { head: ReactElement | string, required?: boolean, caption?: string }
const Question: React.FC<QuestionProps> = ({ head, children, required = true, caption }) => (
    <div style={{
        marginBottom: '.5rem',
        display: 'flex',
        justifyContent: 'center',
        flexFlow: 'column',
        // maxWidth: '30rem',
        width: '100%',
    }}>
        <div style={{
            fontSize: 22,
            marginBottom: '.5rem',
        }}>
            {head}
        </div>
        {caption && (
            // className={s.questionCaption}
            <p>
                {caption}
            </p>
        )}
        {children}
    </div >
)

const SklonKarla: NextPage<ILandingProps> = ({ meta }) => {
    // const [session, isLoadingSession] = useSession()
    const isMobile = useMobile()

    const { handleSubmit, register } = useForm({
        defaultValues: {
            one: '',
            two: '',
            thee: '',
        },
        shouldFocusError: false,
    })

    const [formState, setFormState] = useState<'start' | 'ok' | 'error' | 'fetch'>('start')

    const onSubmit = useCallback(async value => {
        setFormState('fetch')
        const data = {
            id: 'sklon-karla',
            ...value
        }
        await fetch('/api', { method: 'POST', body: JSON.stringify(data) })
            .then((res) => {
                if (res.status !== 200) {
                    console.log(res)
                }
                return res.json()
            })
            .then(res => {
                res.result === 'error' && console.log(res)
                setFormState(res.result === 'success' ? 'ok' : 'error')
            })
    }, [])

    const Skeleton = props => (
        <img
            src={props.src}
            style={{
                objectFit: 'cover',
                width: '100%',
                filter: ' blur(5px)',
            }}
        />
    )

    return (
        <>
            <Head>
                <title>–ú–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ</title>
                <Meta meta={meta} />
            </Head>
            <Layout>
                <Section style={{
                    paddingTop: 0,
                    paddingBottom: 0,
                    ...{
                        padding: isMobile && 0,
                    }
                }}>
                    <Project
                        title='–°–∫–ª–æ–Ω –ö–∞—Ä–ª–∞ –õ–∏–±–Ω–µ–∫—Ö—Ç–∞'
                    >
                        <Section
                            style={{
                                padding: '1rem 0',
                                position: 'relative',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/sklon-karla/1.jpg'}
                                rightImage={'/static/projects/sklon-karla/2.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/sklon-karla/1.jpg'}
                                    />
                                )}
                            />
                        </Section>
                        <p>
                            –ü–ª–æ—â–∞–¥–∫–∞ –Ω–∞ –ó–µ–ª–µ–Ω–æ–π —Å–æ–ø–∫–µ - –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ —Å —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–º –ø–µ–π–∑–∞–∂–µ–º. –ù–∞ –µ–µ –≤–µ—Ä—à–∏–Ω–µ, —É –ê–ª–µ—à–∏, –≥—É–ª—è–µ—Ç –º–Ω–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –∂–∏—Ç–µ–ª–µ–π, –∏ –Ω–µ–º–Ω–æ–≥–∏–µ —Å–ø—É—Å–∫–∞—é—Ç—Å—è –≥—É–ª—è—Ç—å –ø–æ —Å–∫–ª–æ–Ω—É –Ω–∏–∂–µ. –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–∂–∏–π, –∏–¥—É—â–∏–π –ø–æ –∑–µ–ª–µ–Ω—ã–º —Ö–æ–ª–º–∞–º, —Å–ª—ã—à–∏—Ç –∑–≤—É–∫–∏ –ø–∞–¥–∞—é—â–µ–≥–æ —É–≥–ª—è, —Ä–∞–±–æ—Ç—ã –∫—Ä–∞–Ω–æ–≤ –∏ –≥—É–ª–∞ —Å—É–¥–æ–≤ - –µ–≥–æ –≥–ª–∞–∑–∞–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–∞–Ω–æ—Ä–∞–º–∞ –º–æ—Ä—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ—Ö–æ–∂–∏–µ –Ω–µ –±—ã–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —Å—é–¥–∞ —á–∞—â–µ, –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç. –î–≤–∞ —ç—Ç–∏—Ö –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏—Å—å –ø–æ —Ö–æ–ª–º—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö, —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–æ–ø–∏–Ω–∫–æ–π.
                        </p>
                        <Section
                            style={{
                                padding: '1rem 0',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/sklon-karla/3.jpg'}
                                rightImage={'/static/projects/sklon-karla/4.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/sklon-karla/3.jpg'}
                                    />
                                )}
                            />
                        </Section>
                        <p>
                            –í–Ω–∏–∑—É —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª—Å—è –ë–∞—Ä–∞–±–∞–Ω - —ç—Ç–æ –∑–≤—É–∫–æ–≤–æ–π –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –±–∞—Ä–∞–±–∞–Ω–∞. –£–¥–∞—Ä–∏–≤ –≤ –Ω–µ–≥–æ, –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –ø–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ—Ä—Ç–æ–≤–æ–π —Å–∏–º—Ñ–æ–Ω–∏–µ–π, –∑–≤—É—á–∞—â–µ–π –≤ –≤–æ–∑–¥—É—Ö–µ, –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–µ –Ω–æ–≤—ã–º–∏ –∑–≤—É–∫–∞–º–∏.
                            –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ë–∞—Ä–∞–±–∞–Ω–∞ —Ü–∏—Ç–∏—Ä—É—é—Ç —ç—Å—Ç–µ—Ç–∏–∫—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –ø–∞–Ω–æ—Ä–∞–º—ã, –∞ —Ñ–æ—Ä–º–∞ –∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–µ —Å–∏—è–Ω–∏–µ –æ—Ç—Å—ã–ª–∞—é—Ç –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–∞–º –°–æ–ª–Ω—Ü–∞. –ü–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Å –∑–∞–ø–∞–¥–∞ –ª—É—á–∏ –∑–∞–∫–∞—Ç–Ω–æ–≥–æ —Å–æ–ª–Ω—Ü–∞ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–ª–∏–∫–∏ –∏ –º–µ—Ä—Ü–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∏–∑ –≥–æ—Ä–æ–¥–∞.
                        </p>
                        <Section
                            style={{
                                padding: '1rem 0',
                            }}
                        >
                            <ReactCompareImage
                                leftImage={'/static/projects/sklon-karla/5.jpg'}
                                rightImage={'/static/projects/sklon-karla/6.jpg'}
                                aspectRatio='wider'
                                skeleton={(
                                    <Skeleton
                                        src={'/static/projects/sklon-karla/5.jpg'}
                                    />
                                )}
                            />
                            <p>
                                –í—ã—à–µ –∫ –∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä—É –≤–µ–¥–µ—Ç —Ç—Ä–æ–ø–∏–Ω–∫–∞, –≤–¥–æ–ª—å –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–¥–µ–ª–∞–ª–∏ –æ–ø–æ—Ä—ã —Å –∫–∞–Ω–∞—Ç–∞–º–∏ - —ç—Ç–æ "–ø–æ—Ä—É—á–µ–Ω—å" –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –∏ –ø–æ–¥—ä–µ–º–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∏–º–æ–π –∏ –≤–æ –≤—Ä–µ–º—è –¥–æ–∂–¥–µ–π –∏–ª–∏ –≥–æ–ª–æ–ª–µ–¥–∏—Ü—ã. –ö–∞–Ω–∞—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞ –¥–≤—É—Ö —É—Ä–æ–≤–Ω—è—Ö - –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–º–ª–∞–¥—à–µ. –°–∞–º –∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª—Å—è –Ω–∞ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–∫–µ –ø–ª–æ—â–∞–¥–∫–∏. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ö–æ–ª–º–µ –∏ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—è—Ç –æ—Ç–¥—ã—Ö–∞—é—â–∏—Ö –æ—Ç –ø–æ—Ä—ã–≤–æ–≤ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∑–∞–∫–∞—Ç—ã –∏ —Å–ª—É—à–∞—Ç—å —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –ë–∞—Ä–∞–±–∞–Ω–∞.
                            </p>

                            <form
                                onSubmit={handleSubmit(onSubmit)}
                            >
                                <Section style={{
                                    padding: '2rem 0 1rem 0',
                                    display: 'flex',
                                    flexFlow: 'column',
                                    alignItems: 'center',
                                }}>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ? –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ? '}
                                                <Emoji name='ü•∞' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='one'
                                            ref={register}
                                        />
                                    </Question>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ? –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? '}
                                                <Emoji name='ü•µ' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='two'
                                            ref={register}
                                        />
                                    </Question>
                                    <Question
                                        head={(
                                            <>
                                                {'–ß—Ç–æ –≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? –í–∞—à–∏ –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è '}
                                                <Emoji name='ü§î' />
                                            </>
                                        )}
                                    >
                                        <Input
                                            name='three'
                                            ref={register}
                                        />
                                    </Question>
                                    {(formState === 'start' || formState === 'error') && (
                                        <Button
                                            theme='default'
                                            size={'big'}
                                            type={'submit'}
                                            style={{
                                                alignSelf: 'center',
                                                margin: '2rem 0',
                                            }}
                                        >
                                            {formState === 'error' ? '–ß—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å. –ï—â–µ —Ä–∞–∑?' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                                        </Button>
                                    )}
                                    {(formState === 'fetch' || formState === 'ok') && (
                                        <span
                                            style={{
                                                margin: '2rem 0',
                                            }}
                                        >
                                            {formState === 'fetch' ? (
                                                <>
                                                    {'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º '}
                                                    <Emoji name='üì°' />
                                                </>
                                            ) : (
                                                <>
                                                    <Emoji name='ü§©' />
                                                    {' –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω '}
                                                    <Emoji name='ü•≥' />
                                                </>
                                            )}
                                        </span>
                                    )}
                                </Section>
                            </form>

                            <Section style={{
                                padding: '1rem 0',
                                display: 'flex',
                                flexFlow: 'column',
                                alignItems: 'center',
                            }}>
                                <h3
                                    style={{
                                        fontSize: 33,
                                        padding: '3rem 0',
                                        margin: 0,
                                        textTransform: 'uppercase',
                                    }}
                                >
                                    –í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
                                </h3>
                                <iframe
                                    style={{
                                        width: ' 100%',
                                        height: isMobile ? '300px' : 753,
                                        maxWidth: 922,
                                        maxHeight: 753,
                                    }}
                                    src="https://www.youtube.com/embed/eBGIQ7ZuuiU" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" />
                            </Section>
                        </Section>
                    </Project>
                </Section>
            </Layout>
        </>
    )
}

export const getStaticProps: GetStaticProps = async (context) => {
    const meta: IMeta = {
        title: '–ú–û–ô–ó–ê–õ–ò–í.–†–§',
        description: '–î–æ—Ä–æ–≥–∏–µ –ú—É—Ä–º–∞–Ω—á–∞–Ω–µ, –¥–∞–≤–∞–π—Ç–µ —á–∞—â–µ –ª—é–±–æ–≤–∞—Ç—å—Å—è –≤–∏–¥–∞–º–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!',
        image: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ/static/meta.jpg',
        imageWidth: 911,
        imageHeight: 1023,

        url: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ/',
        siteName: '–î–æ—Ä–æ–≥–∏–µ –ú—É—Ä–º–∞–Ω—á–∞–Ω–µ, –¥–∞–≤–∞–π—Ç–µ —á–∞—â–µ –ª—é–±–æ–≤–∞—Ç—å—Å—è –≤–∏–¥–∞–º–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!',
        locale: 'ru_RU',
        type: 'website',
        domain: 'https://–º–æ–π–∑–∞–ª–∏–≤.—Ä—Ñ',

        twitterCard: 'summary_large_image',
        twitterSite: '@',
        twitterCreator: '@tmshv',
    }

    return {
        props: {
            meta,
        }
    }
}

export default SklonKarla